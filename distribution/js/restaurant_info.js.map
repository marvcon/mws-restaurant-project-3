{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/dbhelper.js","src/js/dbpromise.js","src/js/fav-Button.js","src/js/mapkeypass.js","src/js/rest-reviews-form.js","src/js/restaurant_info.js","src/js/sw_reg.js","../node_modules/idb/lib/idb.js"],"names":[],"mappings":"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AAC,OAAO,CAAC,CAAD,CAAP,CAAW,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAD,CAAzB;AACD,CAXD;;;;;AChNA,IAAI,SAAS,CAAC,aAAd,EAA6B;AAC3B,EAAA,SAAS,CAAC,aAAV,CAAwB,QAAxB,CAAiC,QAAjC,EAA2C,IAA3C,CAAgD,UAAS,GAAT,EAAc;AAC5D,IAAA,OAAO,CAAC,GAAR,CAAY,4BAAZ;AACD,GAFD,EAEG,KAFH,CAES,UAAC,CAAD,EAAO;AACd,IAAA,OAAO,CAAC,GAAR,CAAY,6CAAZ,EAA2D,CAA3D;AACD,GAJD;AAKD;;;ACND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"restaurant_info.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import dbPromise from './dbpromise';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nexport default class DBHelper {\r\n\r\n /**\r\n   * API URL\r\n   */\r\n  static get API_URL() {\r\n    const port = 1337; // port where sails server will listen.\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8001 // Change this to your server port\r\n    return `http://localhost:${port}/data/restaurants.json`;\r\n  }\r\n\r\n    /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', `${DBHelper.API_URL}/restaurants`);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Response from server is successful!\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        dbPromise.putRestaurants(restaurants);\r\n        callback(null, restaurants);\r\n      } else {\r\n        console.log(`Request failed. Returned status of ${xhr.status}, trying idb...`);\r\n        // Try idb, if code isn't 200\r\n        dbPromise.getRestaurants().then(idbRestaurants => {\r\n          // Return idb Restaurants if > 1\r\n          if (idbRestaurants.length > 0) {\r\n            callback(null, idbRestaurants)\r\n          } else { // Return an error if restaurants < 0\r\n            callback('No restaurants found in idb', null);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    // XHR needs error handling for when server is down (doesn't respond or sends back codes)\r\n    xhr.onerror = () => {\r\n      console.log('Error while trying XHR, trying idb...');\r\n      // try idb, and if we get restaurants back, return them, otherwise return an error\r\n      dbPromise.getRestaurants().then(idbRestaurants => {\r\n        if (idbRestaurants.length > 0) {\r\n          callback(null, idbRestaurants)\r\n        } else {\r\n          callback('No restaurants found in idb', null);\r\n        }\r\n      });\r\n    }\r\n    xhr.send();\r\n  }\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  /*static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.API_URL}/restaurants/${id}`).then(response => {\r\n      if (!response.ok) return Promise.reject(\"Unable to fetch Restaurants from network\");\r\n      return response.json();\r\n    }).then(fetchedRestaurant => {\r\n      // if restaurant could be fetched from network:\r\n      dbPromise.placeRestaurants(fetchedRestaurant);\r\n      return callback(null, fetchedRestaurant);\r\n    }).catch(networkError => {\r\n      // if restaurant couldn't be fetched from network:\r\n      console.log(`${networkError}, trying idb.`);\r\n      dbPromise.getRestaurants(id).then(idbRestaurant => {\r\n        if (!idbRestaurant) return callback(\"Unable to find Restaurants in idb\", null);\r\n        return callback(null, idbRestaurant);\r\n      });\r\n    });\r\n  }\r\n\r\n   // in src/js/dbhelper.js inside the DBHelper class\r\n   static fetchReviewsByRestaurantId(restaurant_id) {\r\n    return fetch(`${DBHelper.API_URL}/reviews/?restaurant_id=${restaurant_id}`).then(response => {\r\n      if (!response.ok) return Promise.reject(\"Unable to fetched Reviews from network\");\r\n      return response.json();\r\n    }).then(fetchedReviews => {\r\n      // if reviews could be fetched from network:\r\n      dbPromise.putReviews(fetchedReviews);\r\n      return fetchedReviews;\r\n    }).catch(networkError => {\r\n      // if reviews couldn't be fetched from network:\r\n      // try to get reviews from idb\r\n      console.log(`${networkError}, trying idb.`);\r\n      return dbPromise.getReviewsForRestaurant(restaurant_id).then(idbReviews => {\r\n        // if no reviews were found on idb return null\r\n        if (idbReviews.length < 1) return null;\r\n        return idbReviews;\r\n      });\r\n    });\r\n  }\r\n    /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  /*\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n*/\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n   /**\r\n   * Restaurant image URL. It defaults to a medium sized image. It uses restaurant.photograph\r\n   * and fallbacks to restaurant.id if former is missing\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    let url = `/img/${(restaurant.photograph||restaurant.id)}-medium.jpg`;\r\n    return url;\r\n  }\r\n\r\n   /**\r\n   * Restaurant srcset attribute for browser to decide best resolution. It uses restaurant.photograph\r\n   * and fallbacks to restaurant.id if former is missing.\r\n   */\r\n  static imageSrcsetForRestaurant(restaurant) {\r\n    const imageSrc = `/img/${(restaurant.photograph||restaurant.id)}`;\r\n    return `${imageSrc}-small.jpg 300w,\r\n            ${imageSrc}-medium.jpg 600w,\r\n            ${imageSrc}-large.jpg 800w`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant sizes attribute so browser knows image sizes before deciding\r\n   * what image to download.\r\n   */\r\n  static imageSizesForRestaurant(restaurant) {\r\n    return `(max-width: 360px) 280px,\r\n            (max-width: 600px) 600px,\r\n            400px`;\r\n  }\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(map);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n  static mapOffline() {\r\n    const map = document.getElementById('map');\r\n    map.className = \"map-offline\";\r\n    map.innerHTML = `<div class=\"warning-icon\">!</div>\r\n    <div class=\"warning-message\">We're having problems loading Maps</div>\r\n    <div class=\"warning-suggestion\">Are you offline? If you need to see a map, please check back later.</div>`;\r\n  }\r\n}\r\n\r\n","import idb from 'idb';\r\n\r\nconst dbPromise = {\r\n    // creation and updating of database happens here.\r\n    db: idb.open('restaurant-reviews-db', 2, function (upgradeDb) {\r\n      switch (upgradeDb.oldVersion) {\r\n        case 0:\r\n          upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n        case 1:\r\n          upgradeDb.createObjectStore('reviews', { keyPath: 'id' })\r\n            .createIndex('restaurant_id', 'restaurant_id');\r\n      }\r\n    }),\r\n  \r\n     /**\r\n   * Save a restaurant or array of restaurants into idb, using promises.\r\n   */\r\n  putRestaurants(restaurants, forceUpdate = false) {\r\n    if (!restaurants.push) restaurants = [restaurants];\r\n    return this.db.then(db => {\r\n      const store = db.transaction('restaurants', 'readwrite').objectStore('restaurants');\r\n      Promise.all(restaurants.map(networkRestaurant => {\r\n        return store.get(networkRestaurant.id).then(idbRestaurant => {\r\n          if (forceUpdate) return store.put(networkRestaurant);\r\n          if (!idbRestaurant || new Date(networkRestaurant.updatedAt) > new Date(idbRestaurant.updatedAt)) {\r\n            return store.put(networkRestaurant);\r\n          }\r\n        });\r\n      })).then(function () {\r\n        return store.complete;\r\n      });\r\n    });\r\n  },\r\n    /**\r\n     * Get a restaurant, by its id, or all stored restaurants in idb using promises.\r\n     * If no argument is passed, all restaurants will returned.\r\n     */\r\n    getRestaurants(id = undefined) {\r\n      return this.db.then(db => {\r\n        const store = db.transaction('restaurants').objectStore('restaurants');\r\n        if (id) return store.get(Number(id));\r\n        return store.getAll();\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Save a review or array of reviews into idb, using promises\r\n     */\r\n    putReviews(reviews) {\r\n      if (!reviews.push) reviews = [reviews];\r\n      return this.db.then(db => {\r\n        const store = db.transaction('reviews', 'readwrite').objectStore('reviews');\r\n        Promise.all(reviews.map(networkReview => {\r\n          return store.get(networkReview.id).then(idbReview => {\r\n            if (!idbReview || new Date(networkReview.updatedAt) > new Date(idbReview.updatedAt)) {\r\n              return store.put(networkReview);\r\n            }\r\n          });\r\n        })).then(function () {\r\n          return store.complete;\r\n        });\r\n      });\r\n    },\r\n  \r\n    /**\r\n     * Get all reviews for a specific restaurant, by its id, using promises.\r\n     */\r\n    getReviewsForRestaurant(id) {\r\n      return this.db.then(db => {\r\n        const storeIndex = db.transaction('reviews').objectStore('reviews').index('restaurant_id');\r\n        return storeIndex.getAll(Number(id));\r\n      });\r\n       },\r\n    };\r\n  \r\n  export default dbPromise;","import DBHelper from \"./dbhelper\";\r\nimport dbPromise from \"./dbpromise\";\r\n\r\nfunction handleClick() {\r\n  const restaurantId = this.dataset.id;\r\n  const fav = this.getAttribute('aria-pressed') == 'true';\r\n  const url = `${DBHelper.API_URL}/restaurants/${restaurantId}/?is_favorite=${!fav}`;\r\n  const PUT = {method: 'PUT'};\r\n\r\n  return fetch(url, PUT).then(response => {\r\n    if (!response.ok) return Promise.reject(\"Unable to list restaurant as favorite.\");\r\n    return response.json();\r\n  }).then(updatedRestaurant => {\r\n    // update restaurant on idb\r\n    dbPromise.putRestaurants(updatedRestaurant, true);\r\n    // change state of toggle button\r\n    this.setAttribute('aria-pressed', !fav);\r\n  });\r\n}\r\n\r\n\r\nexport default function favoriteButton(restaurant) {\r\n  const button = document.createElement('button');\r\n  button.innerHTML = \"&#x2605;\"; // this is the star symbol in hex code\r\n  button.className = \"fav\";  \r\n  button.dataset.id = restaurant.id; // store restaurant id in dataset for later\r\n  button.setAttribute('aria-label', `List ${restaurant.name} as a favorite`);\r\n  button.setAttribute('aria-pressed', restaurant.is_favorite);\r\n  button.onclick = handleClick;\r\n\r\n  return button;\r\n}"," // js/mapkeypass.js\r\nexport default class MAPKEYPASS {\r\n    static get mapbox_key() {\r\n      // return your mapbox API key\r\n      //return \"AIzaSyB-ZI_xyZkFzrX_YBjE0QWA0fc-HeJQMJ0\";\r\n      return \"pk.eyJ1IjoibWFydmNvbiIsImEiOiJjamljZzdvNmcwMG8wM2txdjFsZnNhanNqIn0.ienXnxJURNO-1UFDdagzqg\";\r\n    }\r\n  }","import DBHelper from \"./dbhelper\";\r\nimport dbPromise from \"./dbpromise\";\r\n\r\n/**\r\n * This section returns a li element with review data so it can be appended to \r\n * the review list.\r\n */\r\nfunction createReviewHTML(review) {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  date.innerHTML = new Date(review.createdAt).toLocaleDateString();\r\n  li.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * This function clears form data\r\n */\r\nfunction clearForm() {\r\n  // clear form data\r\n  document.getElementById('name').value = \"\";\r\n  document.getElementById('rating').selectedIndex = 0;\r\n  document.getElementById('comments').value = \"\";\r\n}\r\n\r\n/**\r\n * The sections makes sure all form fields have a value and return data in\r\n * an object, for a POST request.\r\n */\r\nfunction validateAndGetData() {\r\n  const data = {};\r\n\r\n  // This elements gets name\r\n  let name = document.getElementById('name');\r\n  if (name.value === '') {\r\n    name.focus();\r\n    return;\r\n  }\r\n  data.name = name.value;\r\n\r\n  // This elements gets the rating\r\n  const ratingSelect = document.getElementById('rating');\r\n  const rating = ratingSelect.options[ratingSelect.selectedIndex].value;\r\n  if (rating == \"--\") {\r\n    ratingSelect.focus();\r\n    return;\r\n  }\r\n  data.rating = Number(rating);\r\n\r\n  // This element get comments\r\n  let comments = document.getElementById('comments');\r\n  if (comments.value === \"\") {\r\n    comments.focus();\r\n    return;\r\n  }\r\n  data.comments = comments.value;\r\n\r\n  // This elements gets restaurant_id\r\n  let restaurantId = document.getElementById('review-form').dataset.restaurantId;\r\n  data.restaurant_id = Number(restaurantId);\r\n\r\n  // This set createdAT\r\n  data.createdAt = new Date().toISOString();\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * This is a Handle submit function. \r\n */\r\nfunction handleSubmit(e) {\r\n  e.preventDefault();\r\n  const review = validateAndGetData();\r\n  if (!review) return;\r\n\r\n  console.log(review);\r\n\r\n  const url = `${DBHelper.API_URL}/reviews/`;\r\n  const POST = {\r\n    method: 'POST',\r\n    body: JSON.stringify(review)\r\n  };\r\n\r\n \r\n  return fetch(url, POST).then(response => {\r\n    if (!response.ok) return Promise.reject(\"We couldn't post review to server.\");\r\n    return response.json();\r\n  }).then(newNetworkReview => {\r\n    // save new review on idb\r\n    dbPromise.placeReviews(newNetworkReview);\r\n    // post new review on page\r\n    const reviewList = document.getElementById('reviews-list');\r\n    const review = createReviewHTML(newNetworkReview);\r\n    reviewList.appendChild(review);\r\n    // clear form\r\n    clearForm();\r\n  });\r\n\r\n}\r\n\r\n/**\r\n * This section returns a form element when posting new reviews from restaurant.\r\n */\r\nexport default function reviewForm(restaurantId) {\r\n  const form = document.createElement('form');\r\n  form.id = \"review-form\";\r\n  form.dataset.restaurantId = restaurantId;\r\n\r\n  let p = document.createElement('p');\r\n  const name = document.createElement('input');\r\n  name.id = \"name\"\r\n  name.setAttribute('type', 'text');\r\n  name.setAttribute('aria-label', 'Name');\r\n  name.setAttribute('placeholder', 'Enter Your Name');\r\n  p.appendChild(name);\r\n  form.appendChild(p);\r\n\r\n  p = document.createElement('p');\r\n  const selectLabel = document.createElement('label');\r\n  selectLabel.setAttribute('for', 'rating');\r\n  selectLabel.innerText = \"Your rating: \";\r\n  p.appendChild(selectLabel);\r\n  const select = document.createElement('select');\r\n  select.id = \"rating\";\r\n  select.name = \"rating\";\r\n  select.classList.add('rating');\r\n  [\"--\", 1,2,3,4,5].forEach(number => {\r\n    const option = document.createElement('option');\r\n    option.value = number;\r\n    option.innerHTML = number;\r\n    if (number === \"--\") option.selected = true;\r\n    select.appendChild(option);\r\n  });\r\n  p.appendChild(select);\r\n  form.appendChild(p);\r\n\r\n  p = document.createElement('p');\r\n  const textarea = document.createElement('textarea');\r\n  textarea.id = \"comments\";\r\n  textarea.setAttribute('aria-label', 'comments');\r\n  textarea.setAttribute('placeholder', 'Enter any comments here');\r\n  textarea.setAttribute('rows', '10');\r\n  p.appendChild(textarea);\r\n  form.appendChild(p);\r\n\r\n  p = document.createElement('p');\r\n  const addButton = document.createElement('button');\r\n  addButton.setAttribute('type', 'submit');\r\n  addButton.setAttribute('aria-label', 'Add Review');\r\n  addButton.classList.add('add-review');\r\n  addButton.innerHTML = \"<span>+</span>\";\r\n  p.appendChild(addButton);\r\n  form.appendChild(p);\r\n\r\n  form.onsubmit = handleSubmit;\r\n\r\n  return form;\r\n};","import DBHelper from './dbhelper';\nimport './sw_reg';\nimport MAPKEYPASS from './mapkeypass'\nimport favoriteButton from './fav-Button';\nimport reviewForm from './rest-reviews-form';\n\nlet restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {  \n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\nconst initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else { \n      if (navigator.onLine) {\n        try {    \n      newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: MAPKEYPASS.mapbox_key,\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'    \n      }).addTo(newMap); \n      DBHelper.mapMarkerForRestaurant(self.restaurant, newMap);\n    } catch(error) {\n      console.log(\"Unable to initalized Map\", error);\n      DBHelper.mapOffline();\n    }\n  } else {\n    DBHelper.mapOffline();\n  }\n      fillBreadcrumb();\n}\n  });\n}  \n \n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} */\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.alt = `Picture of ${restaurant.name}`;\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.srcset = DBHelper.imageSrcsetForRestaurant(restaurant);\n  image.sizes = DBHelper.imageSizesForRestaurant(restaurant);\n  image.setAttribute(\"alt\", \"restaurant-img\");\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n  \n  const favButtonContainer = document.getElementById('fav-button-container');\n  favButtonContainer.append( favoriteButton(restaurant) );\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  DBHelper.fetchReviewsByRestaurantId(restaurant.id)\n    .then(fillReviewsHTML);\n}\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews at this time!';\n    container.appendChild(noReviews);\n  } else {\n    const ul = document.getElementById('reviews-list');\n    reviews.forEach(review => {\n      ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n  }\n\n  const h3 = document.createElement('h3');\n  h3.innerHTML = \"Please leave a review\";\n  container.appendChild(h3);\n  const id = getParameterByName('id');\n  container.appendChild(reviewForm(id));\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.createdAt).toLocaleDateString();\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n","if (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register('/sw.js').then(function(reg) {\r\n    console.log(\"Service Worker registered!\");\r\n  }).catch((a) => {\r\n    console.log(\"Unable to register the service worker... \\n\", a);\r\n  });\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}