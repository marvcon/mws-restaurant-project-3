{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/dbhelper.js","src/js/dbpromise.js","src/js/fav-Button.js","src/js/main.js","src/js/mapkeypass.js","src/js/sw_reg.js","../node_modules/idb/lib/idb.js"],"names":[],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import dbPromise from './dbpromise';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nexport default class DBHelper {\r\n\r\n /**\r\n   * API URL\r\n   */\r\n  static get API_URL() {\r\n    const port = 1337; // port where sails server will listen.\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8001 // Change this to your server port\r\n    return `http://localhost:${port}/data/restaurants.json`;\r\n  }\r\n\r\n    /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', `${DBHelper.API_URL}/restaurants`);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Response from server is successful!\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        dbPromise.putRestaurants(restaurants);\r\n        callback(null, restaurants);\r\n      } else {\r\n        console.log(`Request failed. Returned status of ${xhr.status}, trying idb...`);\r\n        // Try idb, if code isn't 200\r\n        dbPromise.getRestaurants().then(idbRestaurants => {\r\n          // Return idb Restaurants if > 1\r\n          if (idbRestaurants.length > 0) {\r\n            callback(null, idbRestaurants)\r\n          } else { // Return an error if restaurants < 0\r\n            callback('No restaurants found in idb', null);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    // XHR needs error handling for when server is down (doesn't respond or sends back codes)\r\n    xhr.onerror = () => {\r\n      console.log('Error while trying XHR, trying idb...');\r\n      // try idb, and if we get restaurants back, return them, otherwise return an error\r\n      dbPromise.getRestaurants().then(idbRestaurants => {\r\n        if (idbRestaurants.length > 0) {\r\n          callback(null, idbRestaurants)\r\n        } else {\r\n          callback('No restaurants found in idb', null);\r\n        }\r\n      });\r\n    }\r\n    xhr.send();\r\n  }\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  /*static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.API_URL}/restaurants/${id}`).then(response => {\r\n      if (!response.ok) return Promise.reject(\"Unable to fetch Restaurants from network\");\r\n      return response.json();\r\n    }).then(fetchedRestaurant => {\r\n      // if restaurant could be fetched from network:\r\n      dbPromise.placeRestaurants(fetchedRestaurant);\r\n      return callback(null, fetchedRestaurant);\r\n    }).catch(networkError => {\r\n      // if restaurant couldn't be fetched from network:\r\n      console.log(`${networkError}, trying idb.`);\r\n      dbPromise.getRestaurants(id).then(idbRestaurant => {\r\n        if (!idbRestaurant) return callback(\"Unable to find Restaurants in idb\", null);\r\n        return callback(null, idbRestaurant);\r\n      });\r\n    });\r\n  }\r\n\r\n   // in src/js/dbhelper.js inside the DBHelper class\r\n   static fetchReviewsByRestaurantId(restaurant_id) {\r\n    return fetch(`${DBHelper.API_URL}/reviews/?restaurant_id=${restaurant_id}`).then(response => {\r\n      if (!response.ok) return Promise.reject(\"Unable to fetched Reviews from network\");\r\n      return response.json();\r\n    }).then(fetchedReviews => {\r\n      // if reviews could be fetched from network:\r\n      dbPromise.putReviews(fetchedReviews);\r\n      return fetchedReviews;\r\n    }).catch(networkError => {\r\n      // if reviews couldn't be fetched from network:\r\n      // try to get reviews from idb\r\n      console.log(`${networkError}, trying idb.`);\r\n      return dbPromise.getReviewsForRestaurant(restaurant_id).then(idbReviews => {\r\n        // if no reviews were found on idb return null\r\n        if (idbReviews.length < 1) return null;\r\n        return idbReviews;\r\n      });\r\n    });\r\n  }\r\n    /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  /*\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n*/\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n   /**\r\n   * Restaurant image URL. It defaults to a medium sized image. It uses restaurant.photograph\r\n   * and fallbacks to restaurant.id if former is missing\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    let url = `/img/${(restaurant.photograph||restaurant.id)}-medium.jpg`;\r\n    return url;\r\n  }\r\n\r\n   /**\r\n   * Restaurant srcset attribute for browser to decide best resolution. It uses restaurant.photograph\r\n   * and fallbacks to restaurant.id if former is missing.\r\n   */\r\n  static imageSrcsetForRestaurant(restaurant) {\r\n    const imageSrc = `/img/${(restaurant.photograph||restaurant.id)}`;\r\n    return `${imageSrc}-small.jpg 300w,\r\n            ${imageSrc}-medium.jpg 600w,\r\n            ${imageSrc}-large.jpg 800w`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant sizes attribute so browser knows image sizes before deciding\r\n   * what image to download.\r\n   */\r\n  static imageSizesForRestaurant(restaurant) {\r\n    return `(max-width: 360px) 280px,\r\n            (max-width: 600px) 600px,\r\n            400px`;\r\n  }\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(map);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n  static mapOffline() {\r\n    const map = document.getElementById('map');\r\n    map.className = \"map-offline\";\r\n    map.innerHTML = `<div class=\"warning-icon\">!</div>\r\n    <div class=\"warning-message\">We're having problems loading Maps</div>\r\n    <div class=\"warning-suggestion\">Are you offline? If you need to see a map, please check back later.</div>`;\r\n  }\r\n}\r\n\r\n","import idb from 'idb';\r\n\r\nconst dbPromise = {\r\n    // creation and updating of database happens here.\r\n    db: idb.open('restaurant-reviews-db', 2, function (upgradeDb) {\r\n      switch (upgradeDb.oldVersion) {\r\n        case 0:\r\n          upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n        case 1:\r\n          upgradeDb.createObjectStore('reviews', { keyPath: 'id' })\r\n            .createIndex('restaurant_id', 'restaurant_id');\r\n      }\r\n    }),\r\n  \r\n     /**\r\n   * Save a restaurant or array of restaurants into idb, using promises.\r\n   */\r\n  putRestaurants(restaurants, forceUpdate = false) {\r\n    if (!restaurants.push) restaurants = [restaurants];\r\n    return this.db.then(db => {\r\n      const store = db.transaction('restaurants', 'readwrite').objectStore('restaurants');\r\n      Promise.all(restaurants.map(networkRestaurant => {\r\n        return store.get(networkRestaurant.id).then(idbRestaurant => {\r\n          if (forceUpdate) return store.put(networkRestaurant);\r\n          if (!idbRestaurant || new Date(networkRestaurant.updatedAt) > new Date(idbRestaurant.updatedAt)) {\r\n            return store.put(networkRestaurant);\r\n          }\r\n        });\r\n      })).then(function () {\r\n        return store.complete;\r\n      });\r\n    });\r\n  },\r\n    /**\r\n     * Get a restaurant, by its id, or all stored restaurants in idb using promises.\r\n     * If no argument is passed, all restaurants will returned.\r\n     */\r\n    getRestaurants(id = undefined) {\r\n      return this.db.then(db => {\r\n        const store = db.transaction('restaurants').objectStore('restaurants');\r\n        if (id) return store.get(Number(id));\r\n        return store.getAll();\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Save a review or array of reviews into idb, using promises\r\n     */\r\n    putReviews(reviews) {\r\n      if (!reviews.push) reviews = [reviews];\r\n      return this.db.then(db => {\r\n        const store = db.transaction('reviews', 'readwrite').objectStore('reviews');\r\n        Promise.all(reviews.map(networkReview => {\r\n          return store.get(networkReview.id).then(idbReview => {\r\n            if (!idbReview || new Date(networkReview.updatedAt) > new Date(idbReview.updatedAt)) {\r\n              return store.put(networkReview);\r\n            }\r\n          });\r\n        })).then(function () {\r\n          return store.complete;\r\n        });\r\n      });\r\n    },\r\n  \r\n    /**\r\n     * Get all reviews for a specific restaurant, by its id, using promises.\r\n     */\r\n    getReviewsForRestaurant(id) {\r\n      return this.db.then(db => {\r\n        const storeIndex = db.transaction('reviews').objectStore('reviews').index('restaurant_id');\r\n        return storeIndex.getAll(Number(id));\r\n      });\r\n       },\r\n    };\r\n  \r\n  export default dbPromise;","import DBHelper from \"./dbhelper\";\r\nimport dbPromise from \"./dbpromise\";\r\n\r\nfunction handleClick() {\r\n  const restaurantId = this.dataset.id;\r\n  const fav = this.getAttribute('aria-pressed') == 'true';\r\n  const url = `${DBHelper.API_URL}/restaurants/${restaurantId}/?is_favorite=${!fav}`;\r\n  const PUT = {method: 'PUT'};\r\n\r\n  return fetch(url, PUT).then(response => {\r\n    if (!response.ok) return Promise.reject(\"Unable to list restaurant as favorite.\");\r\n    return response.json();\r\n  }).then(updatedRestaurant => {\r\n    // update restaurant on idb\r\n    dbPromise.putRestaurants(updatedRestaurant, true);\r\n    // change state of toggle button\r\n    this.setAttribute('aria-pressed', !fav);\r\n  });\r\n}\r\n\r\n\r\nexport default function favoriteButton(restaurant) {\r\n  const button = document.createElement('button');\r\n  button.innerHTML = \"&#x2605;\"; // this is the star symbol in hex code\r\n  button.className = \"fav\";  \r\n  button.dataset.id = restaurant.id; // store restaurant id in dataset for later\r\n  button.setAttribute('aria-label', `List ${restaurant.name} as a favorite`);\r\n  button.setAttribute('aria-pressed', restaurant.is_favorite);\r\n  button.onclick = handleClick;\r\n\r\n  return button;\r\n}","import DBHelper from './dbhelper';\r\nimport './sw_reg';\r\nimport MAPKEYPASS from './mapkeypass'\r\nimport favoriteButton from './fav-Button';\r\n\r\n\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap(); // added \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\nconst initMap = () => {\r\n  if (navigator.onLine) {\r\n    try {\r\n  newMap = L.map('map', {\r\n        center: [40.722216, -73.987501],\r\n        zoom: 12,\r\n        scrollWheelZoom: false\r\n      });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: MAPKEYPASS.mapbox_key,\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n} catch(error) {\r\n  console.log(\"Unable to initalized Map\", error);\r\n  DBHelper.mapOffline();\r\n  }\r\n} else {\r\n  DBHelper.mapOffline();\r\n}\r\n\r\n  updateRestaurants();\r\n}\r\n\r\n/* window.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n} */\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.alt = `Picture of ${restaurant.name}`;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.srcset = DBHelper.imageSrcsetForRestaurant(restaurant);\r\n  image.sizes = DBHelper.imageSizesForRestaurant(restaurant);\r\n  li.append(image);\r\n\r\n  const favButton = favoriteButton(restaurant);\r\n  li.append(favButton);\r\n\r\n\r\n  image.setAttribute(\"alt\", \"restaurant-img\");\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n  \r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('aria-label', `View details about ${restaurant.name}`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    // if either newMap or L (leaflet) aren't defined exit early.\r\n    if (!newMap || !L) return;\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n\r\n/* addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n} */\r\n\r\n"," // js/mapkeypass.js\r\nexport default class MAPKEYPASS {\r\n    static get mapbox_key() {\r\n      // return your mapbox API key\r\n      //return \"AIzaSyB-ZI_xyZkFzrX_YBjE0QWA0fc-HeJQMJ0\";\r\n      return \"pk.eyJ1IjoibWFydmNvbiIsImEiOiJjamljZzdvNmcwMG8wM2txdjFsZnNhanNqIn0.ienXnxJURNO-1UFDdagzqg\";\r\n    }\r\n  }","if (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register('/sw.js').then(function(reg) {\r\n    console.log(\"Service Worker registered!\");\r\n  }).catch((a) => {\r\n    console.log(\"Unable to register the service worker... \\n\", a);\r\n  });\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}